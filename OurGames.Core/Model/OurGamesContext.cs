// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace OurGames.Core.Model
{
    public partial class OurGamesContext : DbContext
    {
        public OurGamesContext()
        {
        }

        public OurGamesContext(DbContextOptions<OurGamesContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccessLevel> AccessLevel { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<CategoryGame> CategoryGame { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<CustomerFavorite> CustomerFavorite { get; set; }
        public virtual DbSet<CustomerGame> CustomerGame { get; set; }
        public virtual DbSet<Game> Game { get; set; }
        public virtual DbSet<Invite> Invite { get; set; }
        public virtual DbSet<Media> Media { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<PasswordRequest> PasswordRequest { get; set; }
        public virtual DbSet<Plataform> Plataform { get; set; }
        public virtual DbSet<PlataformGame> PlataformGame { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity<AccessLevel>(entity =>
            {
                entity.Property(e => e.Description)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CategoryGame>(entity =>
            {
                entity.HasKey(e => new { e.CategoryId, e.GameId })
                    .ForSqlServerIsClustered(false);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.CategoryGame)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CategoryG__Categ__6FE99F9F");

                entity.HasOne(d => d.Game)
                    .WithMany(p => p.CategoryGame)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CategoryG__GameI__70DDC3D8");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.HasIndex(e => e.Email)
                    .HasName("UQ__Customer__A9D10534051835A2")
                    .IsUnique();

                entity.HasIndex(e => e.ProviderId)
                    .HasName("UQ__Customer__B54C687C75C16A7C")
                    .IsUnique();

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProviderId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.AccessLevel)
                    .WithMany(p => p.Customer)
                    .HasForeignKey(d => d.AccessLevelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Customer__Access__4222D4EF");
            });

            modelBuilder.Entity<CustomerFavorite>(entity =>
            {
                entity.HasKey(e => new { e.CustomerId, e.GameId })
                    .ForSqlServerIsClustered(false);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerFavorite)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CustomerF__Custo__48CFD27E");

                entity.HasOne(d => d.Game)
                    .WithMany(p => p.CustomerFavorite)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CustomerF__GameI__49C3F6B7");
            });

            modelBuilder.Entity<CustomerGame>(entity =>
            {
                entity.HasKey(e => new { e.CustomerId, e.GameId })
                    .ForSqlServerIsClustered(false);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerGame)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CustomerG__Custo__44FF419A");

                entity.HasOne(d => d.Game)
                    .WithMany(p => p.CustomerGame)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CustomerG__GameI__45F365D3");
            });

            modelBuilder.Entity<Game>(entity =>
            {
                entity.Property(e => e.BackgroundLink)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Developer)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LaunchDate).HasColumnType("date");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Publisher)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Rating)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Requirements)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ThumbnailLink)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Invite>(entity =>
            {
                entity.HasIndex(e => e.Email)
                    .HasName("UQ__Invite__A9D10534FD6F3243")
                    .IsUnique();

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RequestDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Media>(entity =>
            {
                entity.Property(e => e.Link)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Type)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.HasOne(d => d.Game)
                    .WithMany(p => p.Media)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Media__GameId__3C69FB99");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.GameKey)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.Value).HasColumnType("smallmoney");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Order__CustomerI__1DB06A4F");

                entity.HasOne(d => d.Game)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Order__GameId__1CBC4616");

                entity.HasOne(d => d.Plataform)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.PlataformId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Order__Plataform__4D5F7D71");
            });

            modelBuilder.Entity<PasswordRequest>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.RequestDate).HasColumnType("datetime");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.PasswordRequest)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PasswordR__Custo__4D94879B");
            });

            modelBuilder.Entity<Plataform>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PlataformGame>(entity =>
            {
                entity.HasKey(e => new { e.PlataformId, e.GameId })
                    .ForSqlServerIsClustered(false);

                entity.HasOne(d => d.Game)
                    .WithMany(p => p.PlataformGame)
                    .HasForeignKey(d => d.GameId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Plataform__GameI__31B762FC");

                entity.HasOne(d => d.Plataform)
                    .WithMany(p => p.PlataformGame)
                    .HasForeignKey(d => d.PlataformId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Plataform__Plata__30C33EC3");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}